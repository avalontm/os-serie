// Write solid color (0xFF8040FF) pixel Shader

/////////////////////////////////////////////////////////////////////////////////////////////
// Kernel 0: 8-pixel Dispatch - SIMD8 mode
//
// Input
//
//  7    6    5    4    3    2    1    0       GRF
//               PS Header                   - r0
//               PS Header                   - r1
// (Note: No payload as no attributes)
//
//
// Output
//  7    6    5    4    3    2    1    0
// C7.r C6.r C5.r C4.r C3.r C2.r C1.r C0.r   - r124
// C7.g C6.g C5.g C4.g C3.g C2.g C1.g C0.g   - r125
// C7.b C6.b C5.b C4.b C3.b C2.b C1.b C0.b   - r126
// C7.a C6.a C5.a C4.a C3.a C2.a C1.a C0.a   - r127
//

solid_ff8040ff_dispatch8_begin:
mov (4) g2<1>F 0x30201030VF;  // Unpack immediate vector
mov (8) g124<1>F g2.0<0;1,0>F;   // Copy red to output
mov (8) g125<1>F g2.4<0;1,0>F;   // Copy green to output
mov (8) g126<1>F g2.8<0;1,0>F;   // Copy blue to output
mov (8) g127<1>F g2.12<0;1,0>F;  // Copy alpha to output
send (8) null g124 0x25 0x08031400;        // Send EOT | Render Cache DP, RENDER_TARGET_WRITE | LAST_RENDER_TARGET | SLOTGRP_LO | SIMD8_LO | BINDING_TABLE_IDX(0)

solid_ff8040ff_dispatch8_end:

/////////////////////////////////////////////////////////////////////////////////////////////
// Kernel 1: 32-pixel Dispatch - SIMD16 mode
//
// Input
//
//  7    6    5    4    3    2    1    0       GRF
//               PS Header                   - r0
//               PS Header                   - r1
//               PS Header                   - r2
// (Note: No payload as no attributes)
//
// Output
//   7     6     5     4     3     2     1     0
// C07.r C06.r C05.r C04.r C03.r C02.r C01.r C00.r   - r112
// C15.r C14.r C13.r C12.r C11.r C10.r C09.r C08.r   - r113
// C07.g C06.g C05.g C04.g C03.g C02.g C01.g C00.g   - r114
// C15.g C14.g C13.g C12.g C11.g C10.g C09.g C08.g   - r115
// C07.b C06.b C05.b C04.b C03.b C02.b C01.b C00.b   - r116
// C15.b C14.b C13.b C12.b C11.b C10.b C09.b C08.b   - r117
// C07.a C06.a C05.a C04.a C03.a C02.a C01.a C00.a   - r118
// C15.a C14.a C13.a C12.a C11.a C10.a C09.a C08.a   - r119
// C23.r C22.r C21.r C20.r C19.r C18.r C17.r C16.r   - r120
// C31.r C30.r C29.r C28.r C27.r C26.r C25.r C24.r   - r121
// C23.g C22.g C21.g C20.g C19.g C18.g C17.g C16.g   - r122
// C31.g C30.g C29.g C28.g C27.g C26.g C25.g C24.g   - r123
// C23.b C22.b C21.b C20.b C19.b C18.b C17.b C16.b   - r124
// C31.b C30.b C29.b C28.b C27.b C26.b C25.b C24.b   - r125
// C23.a C22.a C21.a C20.a C19.a C18.a C17.a C16.a   - r126
// C31.a C30.a C29.a C28.a C27.a C26.a C25.a C24.a   - r127
//

solid_ff8040ff_dispatch32_begin:
mov (4) g2<1>f 0x30201030:vf;  // Unpack immediate vector
mov (16) g112<1>f g2.0<0;1,0>f;   // Copy red to output
mov (16) g120<1>f g2.0<0;1,0>f;   // Copy red to output
mov (16) g114<1>f g2.4<0;1,0>f;   // Copy green to output
mov (16) g122<1>f g2.4<0;1,0>f;   // Copy green to output
mov (16) g116<1>f g2.8<0;1,0>f;   // Copy blue to output
mov (16) g124<1>f g2.8<0;1,0>f;   // Copy blue to output
mov (16) g118<1>f g2.12<0;1,0>f;  // Copy alpha to output
mov (16) g126<1>f g2.12<0;1,0>f;  // Copy alpha to output
send (16) null g124 0x05 0x10031000;  // Send Render Cache DP, RENDER_TARGET_WRITE | LAST_RENDER_TARGET | SLOTGRP_LO | SIMD16 | BINDING_TABLE_IDX(0)
send (16) null g124 0x25 0x10031700;  // Send EOT | Render Cache DP, RENDER_TARGET_WRITE | LAST_RENDER_TARGET | SLOTGRP_HI | SIMD16 | BINDING_TABLE_IDX(0)

solid_ff8040ff_dispatch32_end:

/////////////////////////////////////////////////////////////////////////////////////////////
// Kernel 2: 16-pixel Dispatch - SIMD16 mode
//
// Input
//
//  7    6    5    4    3    2    1    0       GRF
//               PS Header                   - r0
//               PS Header                   - r1
// (Note: No payload as no attributes)
//
//
// Output
//   7     6     5     4     3     2     1     0
// C07.r C06.r C05.r C04.r C03.r C02.r C01.r C00.r   - r120
// C15.r C14.r C13.r C12.r C11.r C10.r C09.r C08.r   - r121
// C07.g C06.g C05.g C04.g C03.g C02.g C01.g C00.g   - r122
// C15.g C14.g C13.g C12.g C11.g C10.g C09.g C08.g   - r123
// C07.b C06.b C05.b C04.b C03.b C02.b C01.b C00.b   - r124
// C15.b C14.b C13.b C12.b C11.b C10.b C09.b C08.b   - r125
// C07.a C06.a C05.a C04.a C03.a C02.a C01.a C00.a   - r126
// C15.a C14.a C13.a C12.a C11.a C10.a C09.a C08.a   - r127
//

solid_ff8040ff_dispatch16_begin:

mov (4) g2<1>f 0x30201030vf;  // Unpack immediate vector
mov (16) g120<1>f g2.0<0;1,0>f;   // Copy red to output
mov (16) g122<1>f g2.4<0;1,0>f;   // Copy green to output
mov (16) g124<1>f g2.8<0;1,0>f;   // Copy blue to output
mov (16) g126<1>f g2.12<0;1,0>f;  // Copy alpha to output
send (16) null g120 0x25 0x10031000;  // Send EOT | Render Cache DP, RENDER_TARGET_WRITE | LAST_RENDER_TARGET | SLOTGRP_LO | SIMD16 | BINDING_TABLE_IDX(0)

solid_ff8040ff_dispatch16_end:
